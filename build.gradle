plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'signing'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.5.1'
    id 'net.neoforged.gradleutils' version '[2.0.18,3)'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

group = 'net.neoforged.licenser'
version = gradleutils.getTagOffsetVersion()
description = 'A simple license header manager for Gradle'

repositories {
    gradlePluginPortal()
}

sourceSets {
    functionalTest {
    }
}

configurations {
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}
gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.register('functionalTest', Test) {
    useJUnitPlatform()

    description = 'Runs the functional tests.'
    group = 'verification'

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    mustRunAfter test
}

dependencies {
    implementation gradleApi()

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    functionalTestImplementation gradleTestKit()
}

test {
    useJUnitPlatform()
}

tasks.named('check') {
    dependsOn(functionalTest)
}

license {
    include '**/*.java'
    include '**/*.groovy'
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier = 'groovydoc'
    from groovydoc.destinationDir
}

gradlePlugin {
    plugins {
        licenserPlugin {
            id = 'net.neoforged.licenser'
            implementationClass = 'org.cadixdev.gradle.licenser.Licenser'
        }
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) { mavenPublication ->
            pom {
                name = 'Licenser'
                description = 'A simple license header manager for Gradle, originally from CadixDev'
                url = 'https://github.com/neoforged/licenser'
                scm {
                    url = 'https://github.com/neoforged/licenser'
                    connection = 'https://github.com/neoforged/licenser.git'
                    developerConnection = 'scm:git:git@github.com:NeoForged/licenser.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/neoforged/licenser/issues'
                }
                organization {
                    name = 'NeoForged'
                    url = 'https://github.com/neoforged'
                }
                licenses {
                    license {
                        name = 'MIT'
                        url = file("LICENSE").getAbsolutePath()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name 'forge'
            if (System.env.MAVEN_USER && System.env.MAVEN_PASSWORD) {
                def publishingEndpoint = System.env.MAVEN_URL_RELEASE ?: 'https://maven.neoforged.net/releases'

                if (project.version.toString().endsWith("-SNAPSHOT") && System.env.MAVEN_URL_SNAPSHOTS) {
                    url System.env.MAVEN_URL_SNAPSHOTS
                } else {
                    url publishingEndpoint
                }
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER
                    password = System.env.MAVEN_PASSWORD
                }
            } else {
                url 'repo'
            }
        }
    }
}

if (System.getenv('GPG_PRIVATE_KEY')) {
    signing {
        final signingKey = System.getenv('GPG_PRIVATE_KEY') ?: ''
        final signingPassword = System.getenv('GPG_KEY_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.pluginMaven
    }
}

changelog {
    fromTag '0.7'
}
